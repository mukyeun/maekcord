import DOMPurify from 'dompurify';

/**
 * XSS Î∞©ÏßÄÎ•º ÏúÑÌïú HTML Ï†ïÏ†ú
 * @param {string} html - Ï†ïÏ†úÌï† HTML Î¨∏ÏûêÏó¥
 * @returns {string} Ï†ïÏ†úÎêú HTML
 */
export const sanitizeHTML = (html) => {
  if (!html) return '';
  return DOMPurify.sanitize(html, {
    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'br', 'p', 'div', 'span'],
    ALLOWED_ATTR: ['href', 'target', 'class', 'id']
  });
};

/**
 * ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù Î∞è Ï†ïÏ†ú
 * @param {string} input - Í≤ÄÏ¶ùÌï† ÏûÖÎ†•Í∞í
 * @param {string} type - ÏûÖÎ†• ÌÉÄÏûÖ (text, email, phone, number)
 * @returns {string} Ï†ïÏ†úÎêú ÏûÖÎ†•Í∞í
 */
export const validateAndSanitizeInput = (input, type = 'text') => {
  if (!input || typeof input !== 'string') return '';

  let sanitized = input.trim();

  switch (type) {
    case 'email':
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(sanitized)) {
        throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùº ÌòïÏãùÏûÖÎãàÎã§.');
      }
      break;
    
    case 'phone':
      const phoneRegex = /^[0-9-+\s()]{10,15}$/;
      if (!phoneRegex.test(sanitized)) {
        throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ï†ÑÌôîÎ≤àÌò∏ ÌòïÏãùÏûÖÎãàÎã§.');
      }
      break;
    
    case 'number':
      if (isNaN(sanitized) || sanitized === '') {
        throw new Error('Ïà´ÏûêÎßå ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.');
      }
      break;
    
    case 'text':
    default:
      // ÌäπÏàòÎ¨∏Ïûê Ï†úÌïú (ÏùòÎ£å Îç∞Ïù¥ÌÑ∞ Î≥¥Ïïà)
      const textRegex = /^[a-zA-Z0-9Í∞Ä-Ìû£\s\-_.,!?()]+$/;
      if (!textRegex.test(sanitized)) {
        throw new Error('ÌóàÏö©ÎêòÏßÄ ÏïäÎäî ÌäπÏàòÎ¨∏ÏûêÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
      }
      break;
  }

  return sanitized;
};

/**
 * ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
 * @param {string} token - Í≤ÄÏÇ¨Ìï† JWT ÌÜ†ÌÅ∞
 * @returns {boolean} ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ±
 */
export const isTokenValid = (token) => {
  if (!token) return false;

  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const currentTime = Date.now() / 1000;
    
    return payload.exp > currentTime;
  } catch (error) {
    console.error('ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù Ïã§Ìå®:', error);
    return false;
  }
};

/**
 * ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú
 * @param {string} token - JWT ÌÜ†ÌÅ∞
 * @returns {Object|null} ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
 */
export const extractUserFromToken = (token) => {
  if (!token) return null;

  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return {
      id: payload.id,
      email: payload.email,
      role: payload.role,
      exp: payload.exp
    };
  } catch (error) {
    console.error('ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * ÎØºÍ∞êÌïú Îç∞Ïù¥ÌÑ∞ ÎßàÏä§ÌÇπ
 * @param {string} data - ÎßàÏä§ÌÇπÌï† Îç∞Ïù¥ÌÑ∞
 * @param {string} type - Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ (phone, email, name)
 * @returns {string} ÎßàÏä§ÌÇπÎêú Îç∞Ïù¥ÌÑ∞
 */
export const maskSensitiveData = (data, type = 'phone') => {
  if (!data) return '';

  switch (type) {
    case 'phone':
      return data.replace(/(\d{3})\d{4}(\d{4})/, '$1****$2');
    
    case 'email':
      const [local, domain] = data.split('@');
      const maskedLocal = local.length > 2 
        ? local.substring(0, 2) + '*'.repeat(local.length - 2)
        : local;
      return `${maskedLocal}@${domain}`;
    
    case 'name':
      if (data.length <= 2) return data;
      return data.substring(0, 1) + '*'.repeat(data.length - 1);
    
    default:
      return data;
  }
};

/**
 * ÏÑ∏ÏÖò Î≥¥Ïïà Í≤ÄÏÇ¨
 * @returns {Object} Î≥¥Ïïà ÏÉÅÌÉú
 */
export const checkSessionSecurity = () => {
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  
  const securityStatus = {
    hasValidToken: false,
    hasUserData: false,
    isSecure: false,
    warnings: []
  };

  // ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù
  if (token && isTokenValid(token)) {
    securityStatus.hasValidToken = true;
  } else {
    securityStatus.warnings.push('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÜ†ÌÅ∞');
  }

  // ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
  if (user) {
    try {
      const userData = JSON.parse(user);
      if (userData.id && userData.role) {
        securityStatus.hasUserData = true;
      } else {
        securityStatus.warnings.push('Î∂àÏôÑÏ†ÑÌïú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞');
      }
    } catch (error) {
      securityStatus.warnings.push('ÏÜêÏÉÅÎêú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞');
    }
  } else {
    securityStatus.warnings.push('ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
  }

  // HTTPS Í≤ÄÏ¶ù
  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
    securityStatus.warnings.push('HTTPS Ïó∞Í≤∞Ïù¥ ÏïÑÎãôÎãàÎã§');
  }

  securityStatus.isSecure = securityStatus.hasValidToken && 
                           securityStatus.hasUserData && 
                           securityStatus.warnings.length === 0;

  return securityStatus;
};

/**
 * Î°úÍ∑∏ÏïÑÏõÉ Ïãú Î≥¥Ïïà Ï†ïÎ¶¨
 */
export const secureLogout = () => {
  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ïÎ¶¨
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  
  // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ïÎ¶¨
  sessionStorage.clear();
  
  // Ïø†ÌÇ§ Ï†ïÎ¶¨
  document.cookie.split(";").forEach((c) => {
    document.cookie = c
      .replace(/^ +/, "")
      .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
  });
  
  // Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãú Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏ†Å)
  if ('caches' in window) {
    caches.keys().then(names => {
      names.forEach(name => {
        caches.delete(name);
      });
    });
  }
  
  console.log('üîí Î≥¥Ïïà Ï†ïÎ¶¨ ÏôÑÎ£å');
};

/**
 * API ÏöîÏ≤≠ Î≥¥Ïïà Ìó§Îçî ÏÉùÏÑ±
 * @returns {Object} Î≥¥Ïïà Ìó§Îçî
 */
export const getSecurityHeaders = () => {
  const token = localStorage.getItem('token');
  const headers = {
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'X-Client-Version': '1.0.0' // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≤ÑÏ†Ñ Ï∂îÏ†Å
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  return headers;
}; 